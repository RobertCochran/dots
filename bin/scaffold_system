#!/bin/bash

: "

Copyright 2013, 2014 Alex Jordan.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

"

####################
# README
####################

# Begin comment region
: "

This is a script that I use to install standard packages that I like to have on every system.

It is written specifically for me, but it's designed to be extremely easy to extend and modify. How to do so is shown below.

Unlike most of this repository, this script is licensed under the GPL v3 or later, not the WTFPL. See the top of this file for more info.

# Adding support for new package managers

# Adding support for new distros

# Adding new default repository sources

# Changing the set of packages to install

"
# End comment region

####################
# LICENSE
####################



####################
# INITIAL SETUP
####################

# DEFAULT PARAMETERS DECLARATION

set _PACKAGE_MANAGER="/bin/true"
set _PACKAGE_INSTALL_ARGS=""

# UTILITY FUNCTION DECLARATIONS

function throw_warn() {
	echo -n "WARNING: "
	echo $1
}

function throw_info() {
	if [ $# = 0 ]; then
		throw_warn "Attempted to call throw_info with no arguments!"
		return -1
	fi
	echo -n "INFO: "
	echo $1
}

function throw_fatal() {
	if [ $# = 0 ]; then
		throw_warn "Attempted to call throw_fatal with no arguments!"
		throw_fatal "throw_fatal called, but no reason given. Aborting anyway."
	fi
	echo -n "FATAL: "
	echo $1
	throw_info "Aborting script due to fatal error."
	if [ -v 2 ]; then exit $2; fi
	exit -1
}

# PARAMETER SELECTION UTILITY DECLARATIONS

function check_for_package_manager() {
	
	# TODO: perform function argument validation here
	
	echo -n "Checking for $1... "

	if [ -f $1 ]; then
		_PACKAGE_MANAGER=$1
		_PACKAGE_INSTALL=$2
		echo "done."
		throw_info "Setting $1 to not confirm operations."
		throw_info "This should have no repercussions, since this is a new system."
	else
		echo "not found."
	fi
}

function check_for_package_key_manager() {
	
	# TODO: perform function argument validation here

	# FIXME
	
	echo -n 
	
	
}

function check_for_distro() {
	# TODO: perform function argument validation here
	
	# FIXME
	
	echo -n "Checking if you're running $2..."
	# something
}

# SCRIPT BODY UTILITY DECLARATIONS

function install() {
	$PACKAGE_MANAGER $PACKAGE_INSTALL_ARGS $1
}

function add_repository() {
	if [ $1 = apt ]; then
	       	sudo apt-add-repository multiverse
	else if [ $1 = pacman ]; then
		throw_fatal "Attempted to add a pacman repository, but this is unimplemented!"
	fi
}

function add_key() {
	echo "Adding key for $2"
	wget -q -O - $1 | $PACKAGE_ADD_KEY
	echo "Done adding key."
}

####################
# PARAMETER SELECTION
####################

check_for_package_manager /usr/bin/pacman "-S --noconfirm"
check_for_package_manager /usr/bin/apt-get "-y"

# TODO pacman-key needs args
check_for_package_key_manager /usr/bin/pacman-key ""
check_for_package_key_manager /usr/bin/apt-key "add -"

check_for_distro Ubuntu Ubuntu Ubuntu
check_for_distro Arch "Arch Linux" "Arch GNU/Linux"

####################
# PARAMETER OVERRIDE PARSING
####################

if [ -v PACKAGE_MANAGER ]; then throw_info "Inherited PACKAGE_MANAGER from environment."; fi
if [ -n PACKAGE_MANAGER ]; then set PACKAGE_INSTALLER=_PACKAGE_MANAGER; fi

if [ -v PACKAGE_INSTALL_ARGS ]; then throw_info "Inherited PACKAGE_INSTALL_ARGS from environment."; fi
if [ -n PACKAGE_INSTALL_ARGS ]; then set PACKAGE_INSTALL_ARGS=_PACKAGE_INSTALL_ARGS; fi

if [ -v DISTRO ]; then throw_info "Inherited DISTRO from environment."; fi
if [ -n DISTRO ]; then set DISTRO=_DISTRO; fi

# TODO fallback on DISTRO if DISTRO_PRETTY isn't set
if [ -v DISTRO_PRETTY ]; then throw_info "Inherited DISTRO_PRETTY from environment."; fi
if [ -n DISTRO_PRETTY ]; then set DISTRO_PRETTY=_DISTRO_PRETTY; fi

####################
# PARAMATER VALIDATION
####################

if [[ $PACKAGE_INSTALLER = "/bin/true" ]]; then
	throw_fatal "No suitable package tool found!"
fi

throw_info "Chose $PACKAGE_INSTALLER to install packages."

if [[ $DISTRO = Unknown ]]; then
	throw_fatal "Cannot recognize distro!"
fi

throw_info "Chose $DISTRO_PRETTY as the running distro."

####################
# MAIN SCRIPT BODY
####################

# REPOSITORY SETUP

if [ $PACKAGE_MANAGER = /usr/bin/apt-get ]; then
	echo "Configuring repositories for all APT-based systems"
	
	throw_info "Configuring special case repositories for all APT-based systems"
	throw_info "Configuring the Google repository for APT..."
	echo "Importing the Google signing key..."
	wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
	echo "Setting up the configuration file..."
	sudo touch /etc/apt/sources.list.d/google_list.list
	throw_warn "I'm about to echo the proper Google Talk repository to /etc/apt/sources.list.d/google_list.list. This is untested!"
	sudo sh -c "echo \"deb http://dl.google.com/linux/talkplugin/deb/ stable main\" > /etc/apt/sources.list.d/google_list.list"
fi

if [ $DISTRO = Ubuntu ]; then	
	echo "Configuring repositories for Ubuntu systems..."
	add_repository multiverse
	add_key https://d2t3ff60b2tol4.cloudfront.net/services@insynchq.com.gpg.key Insync
	# hard-coded quantal codename. FIXME
	add_repository "deb http://apt.insynchq.com/ubuntu quantal non-free" Insync
fi

# PACKAGE INSTALLATION

if [ $DISTRO = Arch ]; then
	throw_info "Installing packages for Arch GNU/Linux..."
	install pkgstats
	install dnssec-anchors
       	install base-devel
	install openssh
fi

if [ $PACKAGE_MANAGER = /usr/bin/apt-get ]; then
	echo "Installing packages for APT-based systems..."
	install openssh-server
fi

echo "Installing packages..."

install gnome
install firefox
install awesome
install git
install zsh
install rsync
install lynx
install seahorse

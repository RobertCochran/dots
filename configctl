#!/bin/sh

# configctl - control config setup and installation
 
# Usage: ./configctl [ACTION]
# Control configuration file installation.
# ACTION is one of: $ACTIONS.
# 
# The 'install' action is equivalent to the 'link', 'misc', 'preload', and 'precompile' actions, in that order.
# The 'uninstall' action is unimplemented.
# The 'link' action creates symlinks. hardlinks, and directories.
# The 'misc' action performs miscellaneous tasks, like touching files.
# The 'preload' action downloads resources from the network, and is dependent on 'link'. It is the only action requiring network access.
# The 'precompile' action precompiles zsh scripts, and is dependent on 'link' and 'preload'.
# 
# Exit status is 0 upon success, nonzero upon error.

# Targets POSIX-compliant shells - no less, and no more.

export POSIXLY_CORRECT=

# VARIABLE DECLARATIONS

BASIC=".bash_aliases .bash_logout .bash_profile .bashrc .byobu .emacs .gitconfig .gitignore .gitmodules .profile .reportbugrc .screenrc .selected_editor .zsh_favlist .zshrc.pre-oh-my-zsh bin .pam_environment .netscape .hgrc .zshrc .zprofile .offlineimaprc .gnus.el .caffrc"
HARDLINKS=".pgpkey"
ZSH_PRECOMPILE=".zshrc .zprofile antigen/antigen.zsh .oh-my-zsh/lib/*.zsh .oh-my-zsh/themes/*.zsh-theme .oh-my-zsh/plugins/*/*.zsh .oh-my-zsh/oh-my-zsh.sh"
DIRS=".gnupg .ssh .aptitude .config .bin/bash_completion .bin/todotxt .bin/bin .emacs.d/lisp .todo .bazaar"
LINK_DIRS=".config/awesome .config/cower .config/terminator"
AFTER_DIRS=".gnupg/gpg.conf .ssh/config .aptitude/config .todo/config .bazaar/bazaar.conf"
TOUCH_FILES=".fetchmail.log .msmtp.log"
CONFIG_DIR=$(pwd)
TARGET_DIR=~

DEFAULT_ACTION=install

NUM_WARNINGS=0

# UTILITY FUNCTIONS

logdbgr() {
	echo "[\033[35mdbgr\033[0m] $1"
}

loginfo() {
	echo "[\033[36minfo\033[0m] $1"
}

logwarn() {
	echo "[\033[33mwarn\033[0m] $1"
	NUM_WARNINGS=$(($NUM_WARNINGS + 1))
}

logfail() {
	echo "[\033[31mfail\033[0m] $1"
	echo "Finished unsuccessfully, with 1 failure and $NUM_WARNINGS warning(s)."
	exit $2
}

checkavailable() {
	logdbgr "Checking for $1."
	if command -v $1 2>&1 >/dev/null; then
		loginfo "Detected $(type $1 | sed 's/is/as/')."
	else
		logfail "Failed to detect $1. Cannot $2."
	fi
}

print_help() {
cat <<EOF
Usage: ./configctl [ACTION]
Control configuration file installation.
ACTION is one of: $ACTIONS.

The 'install' action is equivalent to the 'link', 'misc', 'preload', and 'precompile' actions, in that order.
The 'uninstall' action is unimplemented.
The 'link' action creates symlinks. hardlinks, and directories.
The 'misc' action performs miscellaneous tasks, like touching files.
The 'preload' action downloads resources from the network, and is dependent on 'link'. It is the only action requiring network access.
The 'precompile' action precompiles zsh scripts, and is dependent on 'link' and 'preload'.

Exit status is 0 upon success, nonzero upon error.

Version: configctl@$(git rev-parse --verify --short HEAD)

Copyright (C) 2015 Alex Jordan <alex@strugee.net>.
This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://www.wtfpl.net/ for more details.
EOF
}

# ARGUMENT PARSING

ACTIONS="install uninstall link misc preload precompile"

# Validate actions
if [ -n "$1" ]; then
	for j in $ACTIONS; do [ $j = $1 ] && ACTION_VALID=; done
else
	# The default action is automatically valid
	ACTION_VALID=
fi
[ ${ACTION_VALID+x} ] || { print_help; exit 1; }

case "$1" in
	'install')
		logdbgr "Using action 'install'."
		;;
	'uninstall')
		logdbgr "Using action 'uninstall'."
		;;
	'link')
		logdbgr "Using action 'link'."
		;;
	'misc')
		logdbgr "Using action 'misc'."
		;;
	'preload')
		logdbgr "Using action 'preload'."
		;;
	'precompile')
		logdbgr "Using action 'precompile'."
		;;
	*)
		logdbgr "Using default action ('$DEFAULT_ACTION')."
	ACTION=$DEFAULT_ACTION
	;;
esac
[ -z $ACTION ] && ACTION=$1

for i in $@; do
	true
done

# SANITY CHECKS

loginfo "Detected configuration directory as $CONFIG_DIR."
loginfo "Using target directory $TARGET_DIR."

# Error checking on target directory
logdbgr "Checking if target directory exists."
if ! [ -e $TARGET_DIR ]; then
	logwarn "Target directory does not exist."
	loginfo "Creating target directory $TARGET_DIR."
	mkdir -p $TARGET_DIR
	# TODO handle errors
fi
logdbgr "Checking if target directory is a directory."
if ! [ -d $TARGET_DIR ]; then
	logfail "Fatal error: $TARGET_DIR is not a directory." 1
fi

checkavailable git "download resources from Git"
checkavailable curl "download static tarballs"
checkavailable emacs "download Emacs packages"

# Detect zsh
logdbgr "Checking for zsh."
if command -v zsh 2>&1 >/dev/null; then
	loginfo "Detected $(type zsh | sed 's/is/as/')."
else
	logwarn "Failed to detect zsh. Precompilation will not occur."
fi

logdbgr "Finished preparing."
logdbgr "Executing main script body."

# ACTION DEFINITIONS
action_link() {
	loginfo "Installing symlinks..."
	for i in $BASIC; do
		printf "Installing $i..."
		if [ -L $TARGET_DIR/$i ]; then
			printf " skipped.\n"
			continue;
		elif [ -e $TARGET_DIR/$i ]; then
			printf " aborted.\n"
			logwarn "Refusing to overwrite file $TARGET_DIR/$i."
			continue;
		fi
		ln -s $CONFIG_DIR/$i $TARGET_DIR
		printf " done.\n"
	done
	loginfo "Done installing symlinks."

	loginfo "Installing hardlinks..."
	for i in $HARDLINKS; do
		printf "Installing $i..."
		if [ $CONFIG_DIR/$i -ef $TARGET_DIR/$i  ]; then
			printf " skipped.\n"
			continue;
		elif [ -e $TARGET_DIR/$i ]; then
			printf " aborted.\n"
			logwarn "Refusing to overwrite file $TARGET_DIR/$i."
			continue;
		fi
		ln $CONFIG_DIR/$i $TARGET_DIR
		printf " done.\n"
	done
	loginfo "Done installing hardlinks."

	loginfo "Creating configuration directories..."
	for i in $DIRS; do
		printf "Creating $i..."
		mkdir -p $TARGET_DIR/$i
		printf " done.\n"
	done
	loginfo "Done creating configuration directories."

	loginfo "Installing configuration directory symlinks..."
	logwarn "Installing configuration directory symlinks is unimplemented."
	loginfo "Done installing configuration directory symlinks."

	loginfo "Installing symlinks nested in a directory..."
	logwarn "Installing symlinks nested in a directory is unimplemented."
	loginfo "Done installing symlinks nested in a directory."
}

action_misc() {
	loginfo "Touching files..."
	for i in $TOUCH_FILES; do
		printf "Touching $i..."
		touch $TARGET_DIR/$i
		printf " done.\n"
	done
	loginfo "Done touching files."
}

action_preload() {
	loginfo "Cloning resources from git..."
	# TODO: handle errors
	# TODO: print logs for each clone operation
	logdbgr "Cloning oh-my-zsh."
	git clone 'git://github.com/robbyrussell/oh-my-zsh' $TARGET_DIR/.oh-my-zsh
	logdbgr "Cloning Antigen."
	git clone 'git://github.com/zsh-users/antigen.git' $TARGET_DIR/antigen
	logdbgr "Cloning moz-git-tools."
	git clone 'git://github.com/mozilla/moz-git-tools.git' $TARGET_DIR/.bin/moz-git-tools
	logdbgr "Initializing moz-git-tools submodules."
	logdbgr "Changing working directory to $TARGET_DIR/.bin/moz-git-tools."
	cd $TARGET_DIR/.bin/moz-git-tools
	git submodule update --init
	cd $CONFIG_DIR
	logdbgr "Changing working directory to $CONFIG_DIR."
	loginfo "Done cloning resources from git."

	loginfo "Downloading static tarballs..."
	logdbgr "Downloading todo.txt-cli."
	# TODO: don't download if it's already there
	logdbgr "Changing working directory to $TARGET_DIR/.bin/todotxt."
	cd $TARGET_DIR/.bin/todotxt
	curl -L https://github.com/ginatrapani/todo.txt-cli/releases/download/v2.10/todo.txt_cli-2.10.tar.gz | gunzip | tar -x
	# TODO: make this not hard-coded
	# TODO: this doesn't handle already-existing links
	chmod +x $TARGET_DIR/.bin/todotxt/todo.txt_cli-2.10/todo.sh
	ln -s $TARGET_DIR/.bin/todotxt/todo.txt_cli-2.10/todo_completion $TARGET_DIR/.bin/bash_completion
	ln -s $TARGET_DIR/.bin/todotxt/todo.txt_cli-2.10/todo.sh $TARGET_DIR/.bin/bin/todo.sh
	logdbgr "Changing working directory to $CONFIG_DIR."
	cd $CONFIG_DIR
	loginfo "Done downloading static tarballs."

	loginfo "Ensuring that package.el is available..."
	# TODO: make this actually check the result of (require 'package) instead of just testing version
	if [ $(emacs --version | head -1 | cut -d ' ' -f 3 | cut -d . -f 1) -lt 24 -a ! -e $TARGET_DIR/.emacs.d/lisp/package.el ]; then
		logdbgr "Emacs version is too old to be distributed with package.el."
		logdbgr "Downloading package.el."
		curl 'http://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el' > $TARGET_DIR/.emacs.d/lisp/package.el
	fi
	loginfo "Done ensuring that package.el is available."

	loginfo "Downloading Emacs packages..."
	emacs --script .emacs
	loginfo "Done downloading Emacs packages."

	loginfo "Handling submodules..."
	git submodule update --init
	loginfo "Done handling submodules."
}

action_precompile() {
	loginfo "Precompiling zsh scripts..."
	logdbgr "Changing working directory to $TARGET_DIR."
	cd $TARGET_DIR
	for i in $ZSH_PRECOMPILE; do
		printf "Precompiling $i..."
		zsh -c "zcompile $i"
		printf " done.\n"
	done
	logdbgr "Changing working directory to $CONFIG_DIR."
	cd $CONFIG_DIR
	loginfo "Done precompiling zsh scripts."
}

# MAIN SCRIPT BODY

if [ $ACTION = 'install' ]; then
	action_link
	action_misc
	action_preload
	action_precompile
elif [ $ACTION = 'uninstall' ]; then
	logfail 'Uninstallation is unimpemented.' 2
elif [ $ACTION = 'link' ]; then
	action_link
elif [ $ACTION = 'misc' ]; then
	action_misc
elif [ $ACTION = 'preload' ]; then
	action_preload
elif [ $ACTION = 'precompile' ]; then
	action_precompile
fi

echo "Finished successfully, with 0 failures and $NUM_WARNINGS warning(s)."

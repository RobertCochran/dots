#!/bin/sh

# configctl - control config setup and installation
 
# Usage: ./configctl [ACTION]
# Control configuration file installation.
# ACTION is one of: install uninstall prepare migrate link misc preload precompile check.
# 
# The 'install' action is equivalent to the 'prepare', 'migrate', 'link', 'misc', 'preload', and 'precompile' actions, in that order.
# The 'uninstall' action is unimplemented.
# The 'prepare' action creates directories.
# The 'migrate' action migrates old configurations.
# The 'link' action creates symlinks and hardlinks.
# The 'misc' action performs miscellaneous tasks, like touching files.
# The 'preload' action downloads resources from the network, and is dependent on 'link'. It is the only action requiring network access.
# The 'precompile' action precompiles zsh scripts, and is dependent on 'link' and 'preload'.
# The 'check' action searches for common binaries and reports if they are missing.
# 
# Exit status is 0 upon success, nonzero upon error.

# Targets POSIX-compliant shells - no less, and no more.

export POSIXLY_CORRECT=

# VARIABLE DECLARATIONS

LINK_FILES=".bash_aliases .bash_logout .bash_profile .bashrc .byobu .emacs .gitconfig .gitignore .gitmodules .profile .reportbugrc .screenrc .selected_editor .zsh_favlist .zshrc.pre-oh-my-zsh bin .pam_environment .netscape .hgrc .zshrc .zprofile .offlineimaprc .gnus.el .caffrc .ispell_english .muttrc .msmtprc"
HARDLINKS=".pgpkey"
ZSH_PRECOMPILE=".zshrc .zprofile antigen/antigen.zsh .oh-my-zsh/lib/*.zsh .oh-my-zsh/themes/*.zsh-theme .oh-my-zsh/plugins/*/*.zsh .oh-my-zsh/oh-my-zsh.sh"
DIRS=".gnupg .ssh .aptitude .config .bin/bash_completion .bin/todotxt .bin/bin .emacs.d/lisp .todo .bazaar .local/share/applications .config/profanity/themes .mutt"
LINK_DIRS=".config/awesome .config/cower .config/terminator .config/profanity .mutt"
AFTER_DIRS=".gnupg/gpg.conf .ssh/config .aptitude/config .todo/config .bazaar/bazaar.conf .local/share/applications/firefox-nightly.desktop"
TOUCH_FILES=".fetchmail.log .msmtp.log .mutt/muttrc.mailboxes"
CONFIG_DIR=$(pwd)
TARGET_DIR="$HOME"

DEFAULT_ACTION=install

NUM_WARNINGS=0
NUM_MIGRATIONS=0

if [ -f $CONFIG_DIR/local-config ]; then
	CONFIG_DATA="$(cat $CONFIG_DIR/local-config)"
else
	CONFIG_DATA=''
fi

# UTILITY FUNCTIONS

logdbgr() {
	echo "[\033[35mdbgr\033[0m] $1"
}

loginfo() {
	echo "[\033[36minfo\033[0m] $1"
}

logwarn() {
	echo "[\033[33mwarn\033[0m] $1"
	NUM_WARNINGS=$(($NUM_WARNINGS + 1))
}

logfail() {
	echo "[\033[31mfail\033[0m] $1"
	echo "Finished unsuccessfully, with 1 failure, $NUM_WARNINGS warning(s), and 0 migrations."
	exit $2
}

checkavailable() {
	logdbgr "Checking for $1."
	if command -v $1 2>&1 >/dev/null; then
		loginfo "Detected $(type $1 | sed 's/is/as/')."
	else
		logfail "Failed to detect $1. Cannot $2."
	fi
}

checkavailable_warn() {
	logdbgr "Checking for $1."
	if command -v $1 2>&1 >/dev/null; then
		loginfo "Detected $(type $1 | sed 's/is/as/')."
	else
		logwarn "Failed to detect $1."
	fi
}

checkssh() {
	if [ ${1+x} ]; then
		DESCRIPTION=" $1"
	fi
	if [ ${2+x} ]; then
		KEYNAME="_$2"
	fi
	logdbgr "Checking for$DESCRIPTION SSH key..."
	if [ ! -e "$TARGET_DIR"/.ssh/id_rsa$KEYNAME ]; then
		logwarn "Could not find$DESCRIPTION SSH key."
	else
		loginfo "Found$DESCRIPTION SSH key at $TARGET_DIR/.ssh/id_rsa$KEYNAME."
	fi
	logdbgr "Done checking for$DESCRIPTION SSH key."
}

print_help() {
cat <<EOF
Usage: ./configctl [ACTION]
Control configuration file installation.
ACTION is one of: $ACTIONS.

The 'install' action is equivalent to the 'prepare', 'migrate', 'link', 'misc', 'preload', and 'precompile' actions, in that order.
The 'uninstall' action is unimplemented.
The 'prepare' action creates directories.
The 'migrate' action migrates old configurations.
The 'link' action creates symlinks and hardlinks.
The 'misc' action performs miscellaneous tasks, like touching files.
The 'preload' action downloads resources from the network, and is dependent on 'link'. It is the only action requiring network access.
The 'precompile' action precompiles zsh scripts, and is dependent on 'link' and 'preload'.
The 'check' action searches for common binaries and reports if they are missing.

Exit status is 0 upon success, nonzero upon error.

Version: configctl@$(git rev-parse --verify --short HEAD)

Copyright (C) 2015 Alex Jordan <alex@strugee.net>.
This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://www.wtfpl.net/ for more details.
EOF
}

# ARGUMENT PARSING

ACTIONS="install uninstall prepare migrate link misc preload precompile check"

# Validate actions
if [ -n "$1" ]; then
	for j in $ACTIONS; do [ $j = $1 ] && ACTION_VALID=; done
else
	# The default action is automatically valid
	ACTION_VALID=
fi
[ ${ACTION_VALID+x} ] || { print_help; exit 1; }

case "$1" in
	'install')
		logdbgr "Using action 'install'."
		;;
	'uninstall')
		logdbgr "Using action 'uninstall'."
		;;
	'prepare')
		logdbgr "Using action 'prepare'."
		;;
	'migrate')
		logdbgr "Using action 'migrate'."
		;;
	'link')
		logdbgr "Using action 'link'."
		;;
	'misc')
		logdbgr "Using action 'misc'."
		;;
	'preload')
		logdbgr "Using action 'preload'."
		;;
	'precompile')
		logdbgr "Using action 'precompile'."
		;;
	'check')
		logdbgr "Using action 'check'."
		;;
	*)
		logdbgr "Using default action ('$DEFAULT_ACTION')."
	ACTION=$DEFAULT_ACTION
	;;
esac
[ -z $ACTION ] && ACTION=$1

for i in $@; do
	true
done

# SANITY CHECKS

loginfo "Detected configuration directory as $CONFIG_DIR."
loginfo "Using target directory $TARGET_DIR."

# Error checking on target directory
logdbgr "Checking if target directory exists."
if ! [ -e "$TARGET_DIR" ]; then
	logwarn "Target directory does not exist."
	loginfo "Creating target directory $TARGET_DIR."
	mkdir -p "$TARGET_DIR"
	# TODO handle errors
fi
logdbgr "Checking if target directory is a directory."
if ! [ -d "$TARGET_DIR" ]; then
	logfail "Fatal error: $TARGET_DIR is not a directory." 1
fi

checkavailable git "download resources from Git"
checkavailable curl "download static tarballs"
checkavailable emacs "download Emacs packages"
checkavailable patch "patch ZNC.el"

# Detect zsh
logdbgr "Checking for zsh."
if command -v zsh 2>&1 >/dev/null; then
	loginfo "Detected $(type zsh | sed 's/is/as/')."
	HAS_ZSH=0
else
	logwarn "Failed to detect zsh. Precompilation will not occur."
	HAS_ZSH=1
fi

logdbgr "Finished preparing."
logdbgr "Executing main script body."

# ACTION DEFINITIONS

action_prepare() {
	loginfo "Creating configuration directories..."
	for i in $DIRS; do
		printf "Creating $i..."
		mkdir -p "$TARGET_DIR"/$i
		printf " done.\n"
	done
	loginfo "Done creating configuration directories."
}

action_migrate() {
	loginfo "Migrating old configurations..."
	if ls $TARGET_DIR/.emacs.d/elpa/git-commit-mode* > /dev/null 2>&1; then
		printf "Detected obsolete git-commit-mode, removing..."
		NUM_MIGRATIONS=$(($NUM_MIGRATIONS + 1))
		rm -rf $TARGET_DIR/.emacs.d/elpa/git-commit-mode*
		printf " done.\n"
	fi
	if ls $TARGET_DIR/.emacs.d/elpa/git-rebase-mode* > /dev/null 2>&1; then
		printf "Detected obsolete git-rebase-mode, removing..."
		NUM_MIGRATIONS=$(($NUM_MIGRATIONS + 1))
		rm -rf $TARGET_DIR/.emacs.d/elpa/git-rebase-mode*
		printf " done.\n"
	fi
	if [ $NUM_MIGRATIONS = 0 ]; then
		echo "Nothing to migrate."
	fi
	loginfo "Done migrating old configurations."
}

action_link() {
	loginfo "Installing symlinks..."
	for i in $LINK_FILES; do
		printf "Installing $i..."
		if [ -L "$TARGET_DIR"/$i ]; then
			printf " skipped.\n"
			continue;
		elif [ -e "$TARGET_DIR"/$i ]; then
			printf " aborted.\n"
			logwarn "Refusing to overwrite file $TARGET_DIR/$i."
			continue;
		fi
		ln -s $CONFIG_DIR/$i "$TARGET_DIR"
		printf " done.\n"
	done
	loginfo "Done installing symlinks."

	loginfo "Installing hardlinks..."
	for i in $HARDLINKS; do
		printf "Installing $i..."
		if [ $CONFIG_DIR/$i -ef "$TARGET_DIR"/$i  ]; then
			printf " skipped.\n"
			continue;
		elif [ -e "$TARGET_DIR"/$i ]; then
			printf " aborted.\n"
			logwarn "Refusing to overwrite file $TARGET_DIR/$i."
			continue;
		fi
		ln $CONFIG_DIR/$i "$TARGET_DIR"
		printf " done.\n"
	done
	loginfo "Done installing hardlinks."

	loginfo "Installing configuration directory symlinks..."
	logwarn "Installing configuration directory symlinks is unimplemented."
	loginfo "Done installing configuration directory symlinks."

	loginfo "Installing symlinks nested in a directory..."
	logwarn "Installing symlinks nested in a directory is unimplemented."
	loginfo "Done installing symlinks nested in a directory."
}

action_misc() {
	loginfo "Touching files..."
	for i in $TOUCH_FILES; do
		printf "Touching $i..."
		touch "$TARGET_DIR"/$i
		printf " done.\n"
	done
	loginfo "Done touching files."
}

action_preload() {
	loginfo "Cloning resources from git..."
	# TODO: handle errors
	# TODO: print logs for each clone operation
	logdbgr "Cloning oh-my-zsh."
	git clone 'git://github.com/robbyrussell/oh-my-zsh' "$TARGET_DIR"/.oh-my-zsh
	logdbgr "Cloning Antigen."
	git clone 'git://github.com/zsh-users/antigen.git' "$TARGET_DIR"/antigen
	logdbgr "Cloning moz-git-tools."
	git clone 'git://github.com/mozilla/moz-git-tools.git' "$TARGET_DIR"/.bin/moz-git-tools
	logdbgr "Initializing moz-git-tools submodules."
	logdbgr "Changing working directory to $TARGET_DIR/.bin/moz-git-tools."
	cd "$TARGET_DIR"/.bin/moz-git-tools
	git submodule update --init
	cd $CONFIG_DIR
	logdbgr "Changing working directory to $CONFIG_DIR."
	loginfo "Done cloning resources from git."

	loginfo "Downloading static tarballs..."
	if ! [ -d "$TARGET_DIR"/.bin/todotxt/todo.txt_cli-2.10 ]; then
		logdbgr "Downloading todo.txt-cli."
		logdbgr "Changing working directory to $TARGET_DIR/.bin/todotxt."
		cd "$TARGET_DIR"/.bin/todotxt
		curl -L https://github.com/ginatrapani/todo.txt-cli/releases/download/v2.10/todo.txt_cli-2.10.tar.gz | gunzip | tar -x
		# TODO: make this not hard-coded
		# TODO: this doesn't handle already-existing links
		chmod +x "$TARGET_DIR"/.bin/todotxt/todo.txt_cli-2.10/todo.sh
		ln -s "$TARGET_DIR"/.bin/todotxt/todo.txt_cli-2.10/todo_completion "$TARGET_DIR"/.bin/bash_completion
		ln -s "$TARGET_DIR"/.bin/todotxt/todo.txt_cli-2.10/todo.sh "$TARGET_DIR"/.bin/bin/todo.sh
		logdbgr "Changing working directory to $CONFIG_DIR."
		cd $CONFIG_DIR
	else
		logdbgr "Skipping todo.txt-cli due to already-existing directory."
	fi
	loginfo "Done downloading static tarballs."

	loginfo "Ensuring that package.el is available..."
	# TODO: make this actually check the result of (require 'package) instead of just testing version
	# TODO: clean an old package.el if Emacs has been upgraded
	if [ $(emacs --version | head -1 | cut -d ' ' -f 3 | cut -d . -f 1) -lt 24 -a ! -e "$TARGET_DIR"/.emacs.d/lisp/package.el ]; then
		logdbgr "Emacs version is too old to be distributed with package.el."
		logdbgr "Downloading package.el."
		curl 'http://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el' > "$TARGET_DIR"/.emacs.d/lisp/package.el
	fi
	loginfo "Done ensuring that package.el is available."

	loginfo "Downloading Emacs packages..."
	emacs --script .emacs
	loginfo "Done downloading Emacs packages."

	loginfo "Patching ZNC.el..."
	cd "$TARGET_DIR"/.emacs.d/elpa/znc-*
	curl https://github.com/rschuetzler/ZNC.el/commit/e58db9afef82957ffcea6a72977f5f2b4fb53d05.patch | patch
	# FIXME
	#emacs --eval "(byte-recompile-directory $TARGET_DIR/\.emacs\.d/elpa/znc-*/ 0)"
	cd $CONFIG_DIR
	loginfo "Done patching ZNC.el."

	loginfo "Handling submodules..."
	cd $CONFIG_DIR
	git submodule update --init
	loginfo "Done handling submodules."
}

action_precompile() {
	if [ $HAS_ZSH = 0 ]; then
		loginfo "Precompiling zsh scripts..."
		logdbgr "Changing working directory to $TARGET_DIR."
		cd $TARGET_DIR
		for i in $ZSH_PRECOMPILE; do
			printf "Precompiling $i..."
			zsh -c "zcompile $i"
			printf " done.\n"
		done
		logdbgr "Changing working directory to $CONFIG_DIR."
		cd $CONFIG_DIR
		loginfo "Done precompiling zsh scripts."
	else
		logwarn "Not precompiling zsh scripts due to missing zsh."
	fi
}

action_check() {
	logdbgr 'Checking for standard utilities.'
	checkavailable_warn sponge
	checkavailable_warn ssh
	checkavailable_warn dos2unix
	checkavailable_warn pv
	checkavailable_warn sl
	checkavailable_warn nano
	checkavailable_warn pkill
	checkavailable_warn killall
	checkavailable_warn tree
	if ! [ $(echo "$CONFIG_DATA" | grep headless) ]; then
		checkavailable_warn parcimonie
		checkavailable_warn offlineimap
		checkavailable_warn firefox-nightly
		checkavailable_warn terminator
		checkavailable_warn profanity
		checkavailable_warn secret-tool
		# TODO: check for the presence of Profanity keyring secrets
		checkavailable_warn xclip
	fi
	if ! [ $(echo "$CONFIG_DATA" | grep no-nodejs) ]; then
		checkavailable_warn node
		checkavailable_warn npm
		checkavailable_warn bower
		checkavailable_warn grunt
		checkavailable_warn gulp
		checkavailable_warn yo
		checkavailable_warn yosay
		checkavailable_warn nsp
	fi
	logdbgr 'Done checking for standard utilities.'
	logdbgr 'Checking for SSH keys...'
	if ! [ $(echo "$CONFIG_DATA" | grep no-ssh) ]; then
		checkssh general-use
	fi
	checkssh GitHub github
	logdbgr 'Done checking for SSH keys.'
}

# MAIN SCRIPT BODY

if [ $ACTION = 'install' ]; then
	action_prepare
	action_migrate
	action_link
	action_misc
	action_preload
	action_precompile
elif [ $ACTION = 'uninstall' ]; then
	logfail 'Uninstallation is unimpemented.' 2
else
	action_$ACTION
fi

echo "Finished successfully, with 0 failures, $NUM_WARNINGS warning(s), and $NUM_MIGRATIONS migrations."

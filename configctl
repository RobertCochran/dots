#!/bin/sh

# configctl - control config setup and installation

# Usage: ./configctl
# Targets POSIX-compliant shells - no less, and no more.

# TODO:
# Handle existing installations

export POSIXLY_CORRECT=

# Variable definitions

BASIC=".bash_aliases .bash_logout .bash_profile .bashrc .byobu .emacs .gitconfig .gitignore .gitmodules .profile .reportbugrc .screenrc .selected_editor .zsh_favlist .zshrc.pre-oh-my-zsh bin .pam_environment .netscape .hgrc .zshrc .zprofile"
HARDLINKS=".pgpkey"
ZSH_PRECOMPILE=".zshrc .zprofile antigen/antigen.zsh .oh-my-zsh/lib/*.zsh .oh-my-zsh/themes/*.zsh-theme .oh-my-zsh/plugins/*/*.zsh .oh-my-zsh/oh-my-zsh.sh"
DIRS=".gnupg .ssh .aptitude .config .bin/bash_completion .bin/todotxt"
LINK_DIRS=".config/awesome .config/cower .config/terminator"
AFTER_DIRS=".gnupg/gpg.conf .ssh/config .aptitude/config"
TOUCH_FILES=".fetchmail.log"
CONFIG_DIR=$(pwd)
TARGET_DIR=~

logdbgr() {
	echo "[\033[35mdbgr\033[0m] $1"
}

loginfo() {
	echo "[\033[36minfo\033[0m] $1"
}

logwarn() {
	echo "[\033[33mwarn\033[0m] $1"
}

checkavailable() {
	logdbgr "Checking for $1."
	if command -v $1 2>&1 >/dev/null; then
		loginfo "Detected $(type $1 | sed 's/is/as/')."
	else
		logfail "Failed to detect $1. Cannot $2."
	fi
}

loginfo "Detected configuration directory as $CONFIG_DIR."
loginfo "Using target directory $TARGET_DIR."

# Error checking on target directory
logdbgr "Checking if target directory exists."
if ! [ -e $TARGET_DIR ]; then
	logwarn "Target directory does not exist."
	loginfo "Creating target directory $TARGET_DIR."
	mkdir -p $TARGET_DIR
	# TODO handle errors
fi
logdbgr "Checking if target directory is a directory."
if ! [ -d $TARGET_DIR ]; then
	echo "[\033[31mfail\033[0m] Fatal error: $TARGET_DIR is not a directory."
	exit 1
fi

checkavailable git "download resources from Git"
checkavailable curl "download static tarballs"

# Detect zsh
logdbgr "Checking for zsh."
if command -v zsh 2>&1 >/dev/null; then
	loginfo "Detected $(type zsh | sed 's/is/as/')."
else
	logwarn "Failed to detect zsh. Precompilation will not occur."
fi

logdbgr "Finished preparing."
logdbgr "Executing main script body."

loginfo "Installing symlinks..."
for i in $BASIC; do
	printf "Installing $i..."
	if [ -L $TARGET_DIR/$i ]; then
		printf " skipped.\n"
		continue;
	elif [ -e $TARGET_DIR/$i ]; then
		printf " aborted.\n"
		logwarn "Refusing to overwrite file $TARGET_DIR/$i."
		continue;
	fi
	ln -s $CONFIG_DIR/$i $TARGET_DIR
	printf " done.\n"
done
loginfo "Done installing symlinks."

loginfo "Installing hardlinks..."
for i in $HARDLINKS; do
	printf "Installing $i..."
	if [ $CONFIG_DIR/$i -ef $TARGET_DIR/$i  ]; then
		printf " skipped.\n"
		continue;
	elif [ -e $TARGET_DIR/$i ]; then
		printf " aborted.\n"
		logwarn "Refusing to overwrite file $TARGET_DIR/$i."
		continue;
	fi
	ln $CONFIG_DIR/$i $TARGET_DIR
	printf " done.\n"
done
loginfo "Done installing hardlinks."

loginfo "Creating configuration directories..."
for i in $DIRS; do
	printf "Creating $i..."
	mkdir -p $TARGET_DIR/$i
	printf " done.\n"
done
loginfo "Done creating configuration directories."

loginfo "Installing configuration directory symlinks..."
logwarn "Installing configuration directory symlinks is unimplemented."
loginfo "Done installing configuration directory symlinks."

loginfo "Installing symlinks nested in a directory..."
logwarn "Installing symlinks nested in a directory is unimplemented."
loginfo "Done installing symlinks nested in a directory."

loginfo "Touching files..."
for i in $TOUCH_FILES; do
	printf "Touching $i..."
	touch $TARGET_DIR/$i
	printf " done.\n"
done
loginfo "Done touching files."

loginfo "Cloning resources from git..."
# TODO: handle errors
# TODO: print logs for each clone operation
logdbgr "Cloning oh-my-zsh."
git clone 'git://github.com/robbyrussell/oh-my-zsh' $TARGET_DIR/.oh-my-zsh
logdbgr "Cloning Antigen."
git clone 'git://github.com/zsh-users/antigen.git' $TARGET_DIR/antigen
loginfo "Done cloning resources from git."

loginfo "Downloading static tarballs..."
logdbgr "Downloading todo.txt-cli."
# TODO: don't download if it's already there
logdbgr "Changing working directory to $TARGET_DIR/.bin/todotxt."
cd $TARGET_DIR/.bin/todotxt
curl -L https://github.com/ginatrapani/todo.txt-cli/releases/download/v2.10/todo.txt_cli-2.10.tar.gz | gunzip | tar -x
# TODO: make this not hard-coded
# TODO: this doesn't handle already-existing links
ln -s $TARGET_DIR/.bin/todotxt/todo.txt_cli-2.10/todo_completion $TARGET_DIR/.bin/bash_completion
logdbgr "Changing working directory to $CONFIG_DIR."
cd $CONFIG_DIR
loginfo "Done downloading static tarballs."

loginfo "Handling submodules..."
git submodule update --init
loginfo "Done handling submodules."

loginfo "Precompiling zsh scripts..."
logdbgr "Changing working directory to $TARGET_DIR."
cd $TARGET_DIR
for i in $ZSH_PRECOMPILE; do
	printf "Precompiling $i..."
	zsh -c "zcompile $i"
	printf " done.\n"
done
logdbgr "Changing working directory to $CONFIG_DIR"
cd $CONFIG_DIR
loginfo "Done precompiling zsh scripts."
